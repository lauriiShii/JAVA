package Boletin_Programacion_Modular_Recursividad;
import java.util.InputMismatchException;
import java.util.Scanner;


public class Ejercicio13 {
	
	static Scanner scan=new Scanner(System.in);
	
	public static void main(String[] args) {
		/*
		 * Realizar un programa para resolver el juego de las Torres de Hanoi. El juego consiste en tres 
		 * varillas verticales. En una de las varillas se apila un n√∫mero indeterminado de discos. Los discos 
		 * se apilan sobre una varilla en tama√±o decreciente. No hay dos discos iguales, y todos ellos est√°n
		 * apilados de mayor a menor radio en una de las varillas, quedando las otras dos varillas vacantes.
		 * El juego consiste en pasar todos los discos de la varilla ocupada a una de las otras varillas
		 * vacantes. Para realizar este objetivo, es necesario seguir estas simples reglas:
		 * 		‚Ä¢ S√≥lo se puede mover un disco cada vez.
		 * 		‚Ä¢ Un disco de mayor tama√±o no puede descansar sobre uno m√°s peque√±o que √©l mismo.
		 * 		‚Ä¢ S√≥lo puedes desplazar el disco que se encuentre arriba en cada varilla.
		 * El movimiento de n discos se puede visualizar en t√©rminos de mover s√≥lo n-1 discos (y de ah√≠ la recursi√≥n) como sigue:
		 * 		a) Pasar n-1 discos de la varilla 1 a la 2, usando la varilla 3 como √°rea de retenci√≥n temporal.
		 * 		b) Pasar el √∫ltimo disco (el m√°s grande) de la varilla 1 a la 3.
		 * 		c) Pasar los n-1 discos de la varilla 2 a la 3, empleando la varilla 1 como √°rea de retenci√≥n temporal.
		 * El proceso termina cuando la √∫ltima tarea implica pasar n=1 disco, esto es, el caso base. Esto
		 * se logra transfiriendo el disco sin necesidad de un √°rea de retenci√≥n temporal.
		 * Escribe una funci√≥n recursiva con cuatro par√°metros:
		 * 		a) El n√∫mero de discos por transferir.
		 * 		b) La varilla en la que est√°n colocados inicialmente esos discos.
		 * 		c) La varilla a la que debe pasarse esa pila de discos.
		 * 		d) La varilla que se usar√° como √°rea de retenci√≥n temporal.
		 * El programa deber√° imprimir las instrucciones precisas requeridas para pasar los discos de la
		 * varilla inicial a la varilla de destino. Por ejemplo, para pasar una pila de tres discos de la
		 * varilla 1 a la varilla 3, el programa deber√° imprimir la siguiente serie de movimientos:
		 * 		1 ‚Üí 3
		 * 		1 ‚Üí 2
		 * 		3 ‚Üí 2
		 * 		1 ‚Üí 3
		 * 		2 ‚Üí 1
		 * 		2 ‚Üí 3
		 * 		1 ‚Üí 3
		 */
		
		/** VARIABLES **/
		
		int discos;
		
		/** C”DIGO **/

		discos=introInt("Introduce el n˙mero de disco que desee (entero positivo mayor de cero)");
		hanoi('A','B','C', discos);
		
		scan.close();
	}
	
	public static void hanoi (char varillaInicial, char varillaAux, char varillaFinal, int disco){
		
		//Caso base: si es el caso base 
		if (disco == 1) System.out.printf("%nMover disco%d desde varilla %c hasta varilla %c%n", disco, varillaInicial, varillaFinal);
		else{
			//Llamar a hanoi A C B, de disco-1
			hanoi(varillaInicial, varillaFinal, varillaAux, disco-1);
			//Imprimir la varilla inicial y varilla final de un determinado disco
			System.out.printf("%nMover disco%d desde varilla %c hasta varilla %c%n", disco, varillaInicial, varillaFinal);
			//Llamar B A C de disco-1
			hanoi(varillaAux, varillaInicial, varillaFinal, disco-1);
		}
	}
	
	public static int introInt(String mensaje){
		int num=0;
		
		do {
			try{
				System.out.printf("%s%n",mensaje);
				num=scan.nextInt();
				if (num<1) System.out.printf("%nValor no v√°lido, por favor: ");
			}catch(InputMismatchException e){
				//Imprimimos el mensaje de error
				System.out.printf("%n¬°¬°ERROR!! El valor introducido no es reconocido, por favor:%n%n");
				//Limpiamos el buffer
				scan.nextLine();
				//Forza la repetici√≥n del bucle
				num=-1;
			}
		} while (num<1);
		
		return num;
	} 	
}
